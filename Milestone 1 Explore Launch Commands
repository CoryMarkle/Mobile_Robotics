
ssh pi@{IP_ADDRESS_OF_RASPBERRY_PI}
roslaunch turtlebot3_bringup turtlebot3_robot.launch

Terminal 1
export TURTLEBOT3_MODEL=waffle_pi
roslaunch turtlebot3_gazebo turtlebot3_world.launch

Terminal 2
export TURTLEBOT3_MODEL=waffle_pi
roslaunch turtlebot3_navigation move_base.launch

Terminal 3
export TURTLEBOT3_MODEL=waffle_pi
roslaunch turtlebot3_slam turtlebot3_slam.launch

Terminal 4
roslaunch explore_lite explore.launch

move_base_msgs::MoveBaseGoal goal;
  goal.target_pose.pose.position.x = 0;
  goal.target_pose.pose.position.y = 0;
  goal.target_pose.pose.orientation.w = 1.;
  goal.target_pose.header.frame_id = costmap_client_.getGlobalFrameID();
  goal.target_pose.header.stamp = ros::Time::now();
  move_base_client_.sendGoal(goal);



void Explore::stop()
{

 ROS_INFO("Exploration Complete.");
 geometry_msgs::Point point;
 point.x = 0;
 point.y = 0;
 geometry_msgs::Point target_position = point;



  move_base_msgs::MoveBaseGoal goal;
  goal.target_pose.pose.position = target_position;
  goal.target_pose.pose.orientation.w = 1.;
  goal.target_pose.header.frame_id = costmap_client_.getGlobalFrameID();
  goal.target_pose.header.stamp = ros::Time::now();
  move_base_client_.sendGoal(
      goal, [this, target_position](
                const actionlib::SimpleClientGoalState& status,
                const move_base_msgs::MoveBaseResultConstPtr& result) {
        reachedGoal(status, result, target_position);
      });

// move_base_client_.cancelAllGoals();
// exploring_timer_.stop();
}
